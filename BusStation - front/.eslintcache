[{"D:\\BusStation\\BusStation - front\\src\\index.js":"1","D:\\BusStation\\BusStation - front\\src\\components\\Home.js":"2","D:\\BusStation\\BusStation - front\\src\\services\\auth.js":"3","D:\\BusStation\\BusStation - front\\src\\components\\line\\Line.js":"4","D:\\BusStation\\BusStation - front\\src\\components\\login\\Login.js":"5","D:\\BusStation\\BusStation - front\\src\\reducers\\index.js":"6","D:\\BusStation\\BusStation - front\\src\\apis\\Axios.js":"7","D:\\BusStation\\BusStation - front\\src\\actions\\GetCompanies.js":"8","D:\\BusStation\\BusStation - front\\src\\reducers\\GetCompaniesReducers.js":"9","D:\\BusStation\\BusStation - front\\src\\components\\line\\AddLine.js":"10","D:\\BusStation\\BusStation - front\\src\\components\\line\\EditLine.js":"11"},{"size":2411,"mtime":1624196496770,"results":"12","hashOfConfig":"13"},{"size":137,"mtime":1611766924798,"results":"14","hashOfConfig":"13"},{"size":506,"mtime":1624191719304,"results":"15","hashOfConfig":"13"},{"size":6815,"mtime":1624182412687,"results":"16","hashOfConfig":"13"},{"size":1212,"mtime":1624191845944,"results":"17","hashOfConfig":"13"},{"size":179,"mtime":1624189379277,"results":"18","hashOfConfig":"13"},{"size":577,"mtime":1624189083498,"results":"19","hashOfConfig":"13"},{"size":423,"mtime":1624189253259,"results":"20","hashOfConfig":"13"},{"size":258,"mtime":1624189439021,"results":"21","hashOfConfig":"13"},{"size":4549,"mtime":1624196205204,"results":"22","hashOfConfig":"13"},{"size":4071,"mtime":1624196460999,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sc5oum",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\BusStation\\BusStation - front\\src\\index.js",[],"D:\\BusStation\\BusStation - front\\src\\components\\Home.js",[],["48","49"],"D:\\BusStation\\BusStation - front\\src\\services\\auth.js",[],"D:\\BusStation\\BusStation - front\\src\\components\\line\\Line.js",["50","51","52","53","54","55"],"  \r\nimport React from 'react';\r\nimport {Table, Button, Form} from 'react-bootstrap'\r\nimport Axios from '../../apis/Axios';\r\nimport getCompaniesAction from \"../../actions/GetCompanies\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Line extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { \r\n            lines: [],\r\n            companies:[],\r\n            search: {destination:\"\", companyId: null, maximumPrice: 0.00},\r\n            pageNo: 0, \r\n            totalPages: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.getLines(0);\r\n        this.props.getCompanies();\r\n    }\r\n\r\n    getCompanies() {\r\n        Axios.get('/companies')\r\n            .then(res => {\r\n                 // handle success\r\n                 console.log(res);\r\n                 this.setState({companies: res.data});\r\n            })\r\n            .catch(error => {\r\n                // handle error\r\n                console.log(error);\r\n                alert('Unable to get companies!');\r\n            });\r\n    }\r\n\r\n    getLines(pageNo) {\r\n        let config = {\r\n            params: {\r\n                pageNo: pageNo\r\n            },\r\n          }\r\n\r\n        if (this.state.search.destination != \"\") {\r\n            config.params.destination = this.state.search.destination;\r\n        }  \r\n        if (this.state.search.companyId != null) {\r\n            config.params.companyId = this.state.search.companyId;\r\n        }  \r\n        if (this.state.search.maximumPrice != 0.00) {\r\n            config.params.maximumPrice = this.state.search.maximumPrice;\r\n        }  \r\n\r\n        Axios.get('/lines', config)\r\n            .then(res => {\r\n                 // handle success\r\n                 console.log(res);\r\n                 this.setState({\r\n                    lines: res.data,\r\n                    totalPages:res.headers[\"total-pages\"]});\r\n            })\r\n            .catch(error => {\r\n                // handle error\r\n                console.log(error);\r\n                alert('Unable to get lines!');\r\n            });\r\n    }\r\n\r\n    searchValueChange(event) {\r\n        let control = event.target;\r\n\r\n        let name = control.name\r\n        let value = control.value\r\n\r\n        let search = this.state.search\r\n\r\n        search[name] = value\r\n\r\n        this.setState({search:search})\r\n        console.log(this.state.search)\r\n    }\r\n\r\n    delete(taskId) {\r\n        Axios.delete('/lines/' + taskId)\r\n        .then(res => {\r\n            console.log(res);\r\n            alert(\"Line is deleted!\")\r\n            window.location.reload()\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            alert(\"Line is not deleted!\")\r\n        })\r\n    }\r\n\r\n    renderLines() {\r\n        return this.state.lines.map ((line) => {\r\n            return (\r\n                <tr key={line.id}>\r\n                    <td>{line.availableSeats}</td>\r\n                    <td>{line.price}</td>\r\n                    <td>{line.scheduled}</td>\r\n                    <td>{line.destination}</td>\r\n                    <td>{line.companyDTO.name}</td>\r\n                    <td><button className=\"btn btn-primary\" onClick={() => this.edit(line.id)}>Edit</button></td>\r\n                    <td><button className=\"btn btn-danger\" onClick={() => this.delete(line.id)}>Delete</button></td>\r\n                    <td><button className=\"btn btn-success\" onClick={() => this.reservation(line.id)}>Reserve</button></td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    reservation(lineId) {\r\n        this.props.history.push('/lines/reservation/'+ lineId);\r\n    }\r\n\r\n    edit(lineId) {\r\n        this.props.history.push('/lines/edit/'+ lineId);\r\n    }\r\n\r\n    search() {\r\n        this.getLines();\r\n    }\r\n\r\n    addLine() {\r\n        this.props.history.push('/lines/add')\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Lines</h1>\r\n                <Button className=\"btn btn-primary\" type=\"submit\" onClick = {() => this.addLine()}>Add line</Button><br/>\r\n                <Form>\r\n                    <Form.Label htmlFor=\"lDestination\">Destination</Form.Label><br/>\r\n                    <Form.Control id=\"lDestination\" name=\"destination\" type=\"text\" value={this.state.search.destination} onChange={(e) => this.searchValueChange(e)}/><br/>\r\n                    <Form.Label htmlFor=\"lcompanyId\">Company</Form.Label><br/>\r\n                    <Form.Control as=\"select\" id=\"lcompanyId\" name=\"companyId\" onChange={(e) => this.searchValueChange(e)}>\r\n                    <option></option>\r\n                    {\r\n                        this.props.companies.map((company) => {\r\n                            return (\r\n                                <option key={company.id} value={company.id}>\r\n                                    {company.name}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                    </Form.Control><br/>\r\n                    <Form.Label htmlFor=\"lmaximumPrice\">Maximum price</Form.Label><br/>\r\n                    <Form.Control id=\"lmaximumPrice\" name=\"maximumPrice\" type=\"number\" onChange={(e) => this.searchValueChange(e)}/><br/>\r\n\r\n                    <Button style={{ marginTop: \"1px\" }} className=\"button btn-primary\" onClick={()=>{this.search();}}>Search</Button>\r\n                </Form>\r\n                <div>\r\n                <Table style={{marginTop:30}} className=\"table table-dark\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Available seats</th>\r\n                                <th>Price</th>\r\n                                <th>Scheduled</th>\r\n                                <th>Destination</th>\r\n                                <th>Company</th>\r\n                                <th>Actions</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderLines()}\r\n                        </tbody>\r\n                </Table>\r\n                    <div>\r\n                        <Button disabled={this.state.pageNo==0} className=\"btn btn-primary\" onClick={() =>this.getLines(this.state.pageNo = this.state.pageNo - 1)}>Previous</Button>\r\n                        <Button disabled={this.state.pageNo==this.state.totalPages-1} className=\"btn btn-primary\" onClick={() =>this.getLines(this.state.pageNo = this.state.pageNo + 1)}>Next</Button>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // console.log(state);\r\n    return { companies: state.companies };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, {\r\n    getCompanies: getCompaniesAction,\r\n  })(Line);","D:\\BusStation\\BusStation - front\\src\\components\\login\\Login.js",[],"D:\\BusStation\\BusStation - front\\src\\reducers\\index.js",[],"D:\\BusStation\\BusStation - front\\src\\apis\\Axios.js",[],"D:\\BusStation\\BusStation - front\\src\\actions\\GetCompanies.js",[],"D:\\BusStation\\BusStation - front\\src\\reducers\\GetCompaniesReducers.js",[],"D:\\BusStation\\BusStation - front\\src\\components\\line\\AddLine.js",["56"],"D:\\BusStation\\BusStation - front\\src\\components\\line\\EditLine.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":48,"column":43,"nodeType":"63","messageId":"64","endLine":48,"endColumn":45},{"ruleId":"61","severity":1,"message":"62","line":54,"column":44,"nodeType":"63","messageId":"64","endLine":54,"endColumn":46},{"ruleId":"61","severity":1,"message":"65","line":177,"column":60,"nodeType":"63","messageId":"64","endLine":177,"endColumn":62},{"ruleId":"66","severity":1,"message":"67","line":177,"column":121,"nodeType":"68","endLine":177,"endColumn":131},{"ruleId":"61","severity":1,"message":"65","line":178,"column":60,"nodeType":"63","messageId":"64","endLine":178,"endColumn":62},{"ruleId":"66","severity":1,"message":"67","line":178,"column":143,"nodeType":"68","endLine":178,"endColumn":153},{"ruleId":"61","severity":1,"message":"65","line":58,"column":73,"nodeType":"63","messageId":"64","endLine":58,"endColumn":75},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]